//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventSystemGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed class PointOpenStatusEventSystem : Entitas.ReactiveSystem<GameEntity> {

    readonly System.Collections.Generic.List<IPointOpenStatusListener> _listenerBuffer;

    public PointOpenStatusEventSystem(Contexts contexts) : base(contexts.game) {
        _listenerBuffer = new System.Collections.Generic.List<IPointOpenStatusListener>();
    }

    protected override Entitas.ICollector<GameEntity> GetTrigger(Entitas.IContext<GameEntity> context) {
        return Entitas.CollectorContextExtension.CreateCollector(
            context, Entitas.TriggerOnEventMatcherExtension.Added(GameMatcher.PointOpenStatus)
        );
    }

    protected override bool Filter(GameEntity entity) {
        return entity.hasPointOpenStatus && entity.hasPointOpenStatusListener;
    }

    protected override void Execute(System.Collections.Generic.List<GameEntity> entities) {
        foreach (var e in entities) {
            var component = e.pointOpenStatus;
            _listenerBuffer.Clear();
            _listenerBuffer.AddRange(e.pointOpenStatusListener.value);
            foreach (var listener in _listenerBuffer) {
                listener.OnPointOpenStatus(e, component.value);
            }
        }
    }
}
