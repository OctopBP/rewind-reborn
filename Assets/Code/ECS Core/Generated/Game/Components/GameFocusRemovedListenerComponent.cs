//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LanguageExt.Option<FocusRemovedListenerComponent> maybeFocusRemovedListener { get { return HasComponent(GameComponentsLookup.FocusRemovedListener) ? LanguageExt.Option<FocusRemovedListenerComponent>.Some((FocusRemovedListenerComponent)GetComponent(GameComponentsLookup.FocusRemovedListener)) : LanguageExt.Option<FocusRemovedListenerComponent>.None; } }
    public FocusRemovedListenerComponent focusRemovedListener { get { return (FocusRemovedListenerComponent)GetComponent(GameComponentsLookup.FocusRemovedListener); } }
    public bool hasFocusRemovedListener { get { return HasComponent(GameComponentsLookup.FocusRemovedListener); } }

    public GameEntity AddFocusRemovedListener(System.Collections.Generic.List<IFocusRemovedListener> newValue) {
        var index = GameComponentsLookup.FocusRemovedListener;
        var component = (FocusRemovedListenerComponent)CreateComponent(index, typeof(FocusRemovedListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceFocusRemovedListener(System.Collections.Generic.List<IFocusRemovedListener> newValue) {
        var index = GameComponentsLookup.FocusRemovedListener;
        var component = (FocusRemovedListenerComponent)CreateComponent(index, typeof(FocusRemovedListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveFocusRemovedListener() {
        RemoveComponent(GameComponentsLookup.FocusRemovedListener);
        return this;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherFocusRemovedListener;

    public static Entitas.IMatcher<GameEntity> FocusRemovedListener {
        get {
            if (_matcherFocusRemovedListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.FocusRemovedListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherFocusRemovedListener = matcher;
            }

            return _matcherFocusRemovedListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GameEntity AddFocusRemovedListener(IFocusRemovedListener value) {
        var listeners = hasFocusRemovedListener
            ? focusRemovedListener.value
            : new System.Collections.Generic.List<IFocusRemovedListener>();
        listeners.Add(value);
        ReplaceFocusRemovedListener(listeners);
        return this;
    }

    public GameEntity RemoveFocusRemovedListener(IFocusRemovedListener value, bool removeComponentWhenEmpty = true) {
        var listeners = focusRemovedListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveFocusRemovedListener();
        } else {
            ReplaceFocusRemovedListener(listeners);
        }
        return this;
    }
}
