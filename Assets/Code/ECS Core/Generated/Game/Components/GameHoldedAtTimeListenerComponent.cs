//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LanguageExt.Option<HoldedAtTimeListenerComponent> maybeHoldedAtTimeListener { get { return HasComponent(GameComponentsLookup.HoldedAtTimeListener) ? LanguageExt.Option<HoldedAtTimeListenerComponent>.Some((HoldedAtTimeListenerComponent)GetComponent(GameComponentsLookup.HoldedAtTimeListener)) : LanguageExt.Option<HoldedAtTimeListenerComponent>.None; } }
    public HoldedAtTimeListenerComponent holdedAtTimeListener { get { return (HoldedAtTimeListenerComponent)GetComponent(GameComponentsLookup.HoldedAtTimeListener); } }
    public bool hasHoldedAtTimeListener { get { return HasComponent(GameComponentsLookup.HoldedAtTimeListener); } }

    public GameEntity AddHoldedAtTimeListener(System.Collections.Generic.List<IHoldedAtTimeListener> newValue) {
        var index = GameComponentsLookup.HoldedAtTimeListener;
        var component = (HoldedAtTimeListenerComponent)CreateComponent(index, typeof(HoldedAtTimeListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceHoldedAtTimeListener(System.Collections.Generic.List<IHoldedAtTimeListener> newValue) {
        var index = GameComponentsLookup.HoldedAtTimeListener;
        var component = (HoldedAtTimeListenerComponent)CreateComponent(index, typeof(HoldedAtTimeListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveHoldedAtTimeListener() {
        RemoveComponent(GameComponentsLookup.HoldedAtTimeListener);
        return this;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherHoldedAtTimeListener;

    public static Entitas.IMatcher<GameEntity> HoldedAtTimeListener {
        get {
            if (_matcherHoldedAtTimeListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.HoldedAtTimeListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherHoldedAtTimeListener = matcher;
            }

            return _matcherHoldedAtTimeListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GameEntity AddHoldedAtTimeListener(IHoldedAtTimeListener value) {
        var listeners = hasHoldedAtTimeListener
            ? holdedAtTimeListener.value
            : new System.Collections.Generic.List<IHoldedAtTimeListener>();
        listeners.Add(value);
        ReplaceHoldedAtTimeListener(listeners);
        return this;
    }

    public GameEntity RemoveHoldedAtTimeListener(IHoldedAtTimeListener value, bool removeComponentWhenEmpty = true) {
        var listeners = holdedAtTimeListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveHoldedAtTimeListener();
        } else {
            ReplaceHoldedAtTimeListener(listeners);
        }
        return this;
    }
}
