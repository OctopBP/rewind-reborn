//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LanguageExt.Option<PlatformAStateListenerComponent> maybePlatformAStateListener { get { return HasComponent(GameComponentsLookup.PlatformAStateListener) ? LanguageExt.Option<PlatformAStateListenerComponent>.Some((PlatformAStateListenerComponent)GetComponent(GameComponentsLookup.PlatformAStateListener)) : LanguageExt.Option<PlatformAStateListenerComponent>.None; } }
    public PlatformAStateListenerComponent platformAStateListener { get { return (PlatformAStateListenerComponent)GetComponent(GameComponentsLookup.PlatformAStateListener); } }
    public bool hasPlatformAStateListener { get { return HasComponent(GameComponentsLookup.PlatformAStateListener); } }

    public GameEntity AddPlatformAStateListener(System.Collections.Generic.List<IPlatformAStateListener> newValue) {
        var index = GameComponentsLookup.PlatformAStateListener;
        var component = (PlatformAStateListenerComponent)CreateComponent(index, typeof(PlatformAStateListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePlatformAStateListener(System.Collections.Generic.List<IPlatformAStateListener> newValue) {
        var index = GameComponentsLookup.PlatformAStateListener;
        var component = (PlatformAStateListenerComponent)CreateComponent(index, typeof(PlatformAStateListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePlatformAStateListener() {
        RemoveComponent(GameComponentsLookup.PlatformAStateListener);
        return this;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlatformAStateListener;

    public static Entitas.IMatcher<GameEntity> PlatformAStateListener {
        get {
            if (_matcherPlatformAStateListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlatformAStateListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlatformAStateListener = matcher;
            }

            return _matcherPlatformAStateListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GameEntity AddPlatformAStateListener(IPlatformAStateListener value) {
        var listeners = hasPlatformAStateListener
            ? platformAStateListener.value
            : new System.Collections.Generic.List<IPlatformAStateListener>();
        listeners.Add(value);
        ReplacePlatformAStateListener(listeners);
        return this;
    }

    public GameEntity RemovePlatformAStateListener(IPlatformAStateListener value, bool removeComponentWhenEmpty = true) {
        var listeners = platformAStateListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemovePlatformAStateListener();
        } else {
            ReplacePlatformAStateListener(listeners);
        }
        return this;
    }
}
