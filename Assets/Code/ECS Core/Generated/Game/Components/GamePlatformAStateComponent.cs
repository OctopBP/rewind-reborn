//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlatformAStateComponent platformAState { get { return (PlatformAStateComponent)GetComponent(GameComponentsLookup.PlatformAState); } }
    public bool hasPlatformAState { get { return HasComponent(GameComponentsLookup.PlatformAState); } }

    public void AddPlatformAState(Rewind.ECSCore.Enums.PlatformAState newValue) {
        var index = GameComponentsLookup.PlatformAState;
        var component = (PlatformAStateComponent)CreateComponent(index, typeof(PlatformAStateComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlatformAState(Rewind.ECSCore.Enums.PlatformAState newValue) {
        var index = GameComponentsLookup.PlatformAState;
        var component = (PlatformAStateComponent)CreateComponent(index, typeof(PlatformAStateComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlatformAState() {
        RemoveComponent(GameComponentsLookup.PlatformAState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlatformAState;

    public static Entitas.IMatcher<GameEntity> PlatformAState {
        get {
            if (_matcherPlatformAState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlatformAState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlatformAState = matcher;
            }

            return _matcherPlatformAState;
        }
    }
}
