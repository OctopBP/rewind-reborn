//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Octop.ComponentModel.CodeGenerators.EntityBuilderGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using Rewind.Services;
using UnityEngine;
using Sirenix.OdinInspector;

namespace Octop.ComponentModel {
    public class GameEntityBuilderInit : MonoBehaviour, IEventListener {
	    [SerializeReference, ValueDropdown(nameof(Models))] List<IGameComponentModel> models = new();
        [SerializeReference, ValueDropdown(nameof(Listeners))] List<IGameComponentListener> listeners = new();

        static IEnumerable Models = new ValueDropdownList<IGameComponentModel>() {
            { "Connector", new ConnectorModel() },
            { "Lever A State", new LeverAStateModel() },
            { "Button A", new ButtonAModel() },
            { "Platform A Move Time", new PlatformAMoveTimeModel() },
            { "Platform A Data", new PlatformADataModel() },
            { "Point", new PointModel() },
            { "Depth", new DepthModel() },
            { "Previous Point Index", new PreviousPointIndexModel() },
            { "Id", new IdModel() },
            { "Finish Reached", new FinishReachedModel() },
            { "Gear Type C State", new GearTypeCStateModel() },
            { "Lever A", new LeverAModel() },
            { "Gear Type B Data", new GearTypeBDataModel() },
            { "Gear Type A Previous State", new GearTypeAPreviousStateModel() },
            { "Clone", new CloneModel() },
            { "Gear Type C Previous State", new GearTypeCPreviousStateModel() },
            { "Door A", new DoorAModel() },
            { "Finish", new FinishModel() },
            { "Timer Complete", new TimerCompleteModel() },
            { "Rewind Point Index", new RewindPointIndexModel() },
            { "Gear Type C", new GearTypeCModel() },
            { "Character", new CharacterModel() },
            { "Pendulum Data", new PendulumDataModel() },
            { "Player", new PlayerModel() },
            { "Path Follower Speed", new PathFollowerSpeedModel() },
            { "Clock State", new ClockStateModel() },
            { "Game Settings", new GameSettingsModel() },
            { "Time", new GameTimeModel() },
            { "Connector Activate Distance", new ConnectorActivateDistanceModel() },
            { "Parent Transform", new ParentTransformModel() },
            { "Holded At Time", new HoldedAtTimeModel() },
            { "Connector State", new ConnectorStateModel() },
            { "Time Point", new TimePointModel() },
            { "Pendulum State", new PendulumStateModel() },
            { "Door A State", new DoorAStateModel() },
            { "Active", new ActiveModel() },
            { "Path Follower", new PathFollowerModel() },
            { "Follow Transform", new FollowTransformModel() },
            { "View Controller", new ViewControllerModel() },
            { "Pendulum Sway Time", new PendulumSwayTimeModel() },
            { "Point Open Status", new PointOpenStatusModel() },
            { "Local Position", new LocalPositionModel() },
            { "Time Point Used", new TimePointUsedModel() },
            { "Vertex Path", new VertexPathModel() },
            { "Gear Type A Locked", new GearTypeALockedModel() },
            { "Gear Type A", new GearTypeAModel() },
            { "Movable", new MovableModel() },
            { "View Disabled", new ViewDisabledModel() },
            { "View", new ViewModel() },
            { "Button A State", new ButtonAStateModel() },
            { "Gear Type A State", new GearTypeAStateModel() },
            { "Target Transform", new TargetTransformModel() },
            { "Position", new PositionModel() },
            { "Pendulum", new PendulumModel() },
            { "Gear Type C Locked", new GearTypeCLockedModel() },
            { "Focusable", new FocusableModel() },
            { "Puzzle Element Done", new PuzzleElementDoneModel() },
            { "Puzzle Element", new PuzzleElementModel() },
            { "Platform A", new PlatformAModel() },
            { "Platform A State", new PlatformAStateModel() },
            { "Move Target", new MoveTargetModel() },
            { "Clock Data", new ClockDataModel() },
            { "Gear Type C Data", new GearTypeCDataModel() },
            { "Id Ref", new IdRefModel() },
            { "Move Complete", new MoveCompleteModel() },
            { "Active Second", new ActiveSecondModel() },
            { "Point Index", new PointIndexModel() },
            { "Delta Time", new DeltaTimeModel() },
            { "Timer", new TimerModel() },
            { "Rotation", new RotationModel() },
            { "Gear Type B", new GearTypeBModel() },
            { "Move State", new MoveStateModel() },
            { "Clock", new ClockModel() },
            { "Point Links", new PointLinksModel() },
            { "Door A Points", new DoorAPointsModel() },
            { "Gear Type A Data", new GearTypeADataModel() },
            { "Focus", new FocusModel() }
        };
        
        static IEnumerable Listeners = new ValueDropdownList<IGameComponentListener>() {
	        { "Lever A State", new LeverAStateListener() },
	        { "Depth", new DepthListener() },
	        { "Finish Reached", new FinishReachedListener() },
	        { "Gear Type C State", new GearTypeCStateListener() },
	        { "Clock State", new ClockStateListener() },
	        { "Time", new GameTimeListener() },
	        { "Holded At Time", new HoldedAtTimeListener() },
	        { "Holded At Time Removed", new HoldedAtTimeRemovedListener() },
	        { "Connector State", new ConnectorStateListener() },
	        { "Pendulum State", new PendulumStateListener() },
	        { "Door A State", new DoorAStateListener() },
	        { "Active", new ActiveListener() },
	        { "Active Removed", new ActiveRemovedListener() },
	        { "Point Open Status", new PointOpenStatusListener() },
	        { "Local Position", new LocalPositionListener() },
	        { "Gear Type A Locked", new GearTypeALockedListener() },
	        { "Gear Type A Locked Removed", new GearTypeALockedRemovedListener() },
	        { "Button A State", new ButtonAStateListener() },
	        { "Gear Type A State", new GearTypeAStateListener() },
	        { "Position", new PositionListener() },
	        { "Gear Type C Locked", new GearTypeCLockedListener() },
	        { "Gear Type C Locked Removed", new GearTypeCLockedRemovedListener() },
	        { "Platform A State", new PlatformAStateListener() },
	        { "Move Complete", new MoveCompleteListener() },
	        { "Active Second", new ActiveSecondListener() },
	        { "Active Second Removed", new ActiveSecondRemovedListener() },
	        { "Rotation", new RotationListener() },
	        { "Focus", new FocusListener() },
	        { "Focus Removed", new FocusRemovedListener() }
        };

        GameEntityBuilder gameEntityBuilder;
        
        void Awake() {
		    var entity = Contexts.sharedInstance.game.CreateEntity();
	        gameEntityBuilder = new GameEntityBuilder(entity, models, listeners);
        }

        public void registerListeners() => gameEntityBuilder.registerListeners();
        public void unregisterListeners() => gameEntityBuilder.unregisterListeners();
    }
}